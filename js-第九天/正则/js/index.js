

// 正则（regexp）（regular expression）

// 定义：使用某些字符来描述、匹配一系列符合某个句法规则的字符串，也就是用来匹配处理字符串的

// 作用：
// 1.数据验证
// 2.复杂字符串的搜索和替换

// 要想使用正则，就要创建 正则对象

// 1. RegExp构造函数
// 2. //

// var reg1 = new RegExp('正则表达式的规则',匹配模式);
// var reg2 = /正则表达式的规则/匹配模式;


// \d:匹配一个数字
// \w:匹配一个字母或者数字
// \s:空格

// ^：匹配开始位置，^[0-9]$
// $：匹配结束位置
// *：表示任意多个字符（包括0个）
// +：表示至少一个字符
// ?：表示0个或1个字符
// .：匹配任意字符

// |：类似于js中||，称为分支条件

// ():组，提取匹配字符串，表达式中有几个()就有几个相应的匹配字符串，(abc|bcd|cde)
// {}:一般用来匹配长度，\d{2}
// []：匹配的字符范围，[0-9],[a-z]


// 当正则表达中包含特殊字符，要使用 \ 来转义

//  /\d{3,4}\-\d{1,}/


// 匹配模式
// i:忽略大小写
// g:全文查找出现的所有匹配字符串
// ig（gi）:全文查找并且忽略大小写


var reg1 = new RegExp('^\\d{5}$');

var reg2 = /^\d{5}$/

console.log(reg1);
console.log(reg2);

// 通过 正则对象的 test()来验证某个字符串是否符合规则，参数：某个字符串，返回值是 true或者false

console.log(reg1.test('12378'));
console.log(reg2.test('1237'));


var reg3 = /^\d{3,6}$/;

console.log(reg3.test('123456798'));



// 字符串的方法
// search():搜素子字符串，参数：某个字符串/某个正则对象，返回值：第一个与参数匹配的子字符串的位置，如果没有，返回 -1
// replace()：查找并替换字符串，参数1：字符串/某个正则对象,参数2：要替换的字符串，返回值：处理过后的新字符串
// match()：参数1：字符串/某个正则对象，返回值：一个由匹配结果组成的数组
// split()：参数1：字符串/某个正则对象，返回值：一个数组

console.log('hahahello 123heWorld'.search(/\d{3}/));

console.log('hahahello heWor456ld'.replace(/\d{3}/, '123'));

console.log('ha123hahe456llo heWor789ld'.match(/\d{3}/g));

console.log('ha123hahe456llo'.split(/\d{3}/));


// 数字：^[0-9]*$

// n位的数字：^\d{n}$

// 至少n位的数字：^\d{n,}$

// m-n位的数字：^\d{m,n}$

// 日期格式：/^\d{4}-\d{1,2}-\d{1,2}/

// 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$

// 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}

// 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$

// 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$

































